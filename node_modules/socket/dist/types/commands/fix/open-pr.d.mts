import { graphql as OctokitGraphql } from '@octokit/graphql';
import { PackageURL } from '@socketregistry/packageurl-js';
import type { SocketArtifact } from '../../utils/alert/artifact.mts';
import type { components } from '@octokit/openapi-types';
import type { OctokitResponse } from '@octokit/types';
export declare function getOctokitGraphql(): typeof OctokitGraphql;
export declare function cacheFetch<T>(key: string, fetcher: () => Promise<T>, ttlMs?: number | undefined): Promise<T>;
export type Pr = components['schemas']['pull-request'];
export type MERGE_STATE_STATUS = 'BEHIND' | 'BLOCKED' | 'CLEAN' | 'DIRTY' | 'DRAFT' | 'HAS_HOOKS' | 'UNKNOWN' | 'UNSTABLE';
export type PrMatch = {
    author: string;
    baseRefName: string;
    headRefName: string;
    mergeStateStatus: MERGE_STATE_STATUS;
    number: number;
    title: string;
};
export type CleanupPrsOptions = {
    newVersion?: string | undefined;
    purl?: string | undefined;
    workspace?: string | undefined;
};
export declare function cleanupOpenPrs(owner: string, repo: string, options?: CleanupPrsOptions | undefined): Promise<PrMatch[]>;
export type PrAutoMergeState = {
    enabled: boolean;
    details?: string[];
};
export declare function enablePrAutoMerge({ node_id: prId }: Pr): Promise<PrAutoMergeState>;
export type GetOpenSocketPrsOptions = {
    author?: string | undefined;
    newVersion?: string | undefined;
    purl?: string | undefined;
    workspace?: string | undefined;
};
export declare function getOpenSocketPrs(owner: string, repo: string, options?: GetOpenSocketPrsOptions | undefined): Promise<PrMatch[]>;
export type OpenPrOptions = {
    baseBranch?: string | undefined;
    cwd?: string | undefined;
    workspace?: string | undefined;
};
export declare function openPr(owner: string, repo: string, branch: string, purl: string | PackageURL | SocketArtifact, newVersion: string, options?: OpenPrOptions | undefined): Promise<OctokitResponse<Pr> | null>;
export declare function prExistForBranch(owner: string, repo: string, branch: string): Promise<boolean>;
export declare function setGitRemoteGithubRepoUrl(owner: string, repo: string, token: string, cwd?: string): Promise<void>;
//# sourceMappingURL=open-pr.d.mts.map