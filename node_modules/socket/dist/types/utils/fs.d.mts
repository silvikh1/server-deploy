import type { Remap } from '@socketsecurity/registry/lib/objects';
import type { Abortable } from 'node:events';
import type { BigIntStats, ObjectEncodingOptions, OpenMode, PathLike, PathOrFileDescriptor, StatSyncOptions, Stats } from 'node:fs';
import type { FileHandle } from 'node:fs/promises';
export declare function removeNodeModules(cwd?: string): Promise<void>;
export type FindUpOptions = {
    cwd?: string | undefined;
    signal?: AbortSignal | undefined;
};
export declare function findUp(name: string | string[], { cwd, signal }: FindUpOptions): Promise<string | undefined>;
export type ReadFileOptions = Remap<ObjectEncodingOptions & Abortable & {
    flag?: OpenMode | undefined;
}>;
export declare function readFileBinary(filepath: PathLike | FileHandle, options?: ReadFileOptions | undefined): Promise<Buffer>;
export declare function readFileUtf8(filepath: PathLike | FileHandle, options?: ReadFileOptions | undefined): Promise<string>;
export declare function safeReadFile(filepath: PathLike | FileHandle, options?: 'utf8' | 'utf-8' | {
    encoding: 'utf8' | 'utf-8';
} | undefined): Promise<string | undefined>;
export declare function safeReadFileSync(filepath: PathOrFileDescriptor, options?: 'utf8' | 'utf-8' | {
    encoding: 'utf8' | 'utf-8';
} | undefined): string | undefined;
export declare function safeStatsSync(filepath: PathLike, options?: undefined): Stats | undefined;
export declare function safeStatsSync(filepath: PathLike, options?: StatSyncOptions & {
    bigint?: false | undefined;
}): Stats | undefined;
export declare function safeStatsSync(filepath: PathLike, options: StatSyncOptions & {
    bigint: true;
}): BigIntStats | undefined;
export declare function safeStatsSync(filepath: PathLike, options: StatSyncOptions & {
    bigint: boolean;
}): Stats | BigIntStats | undefined;
//# sourceMappingURL=fs.d.mts.map