'use strict';

var debug = require('../external/@socketsecurity/registry/lib/debug');
var npm = require('../external/@socketsecurity/registry/lib/npm');
var spawn = require('../external/@socketsecurity/registry/lib/spawn');
var path = require('node:path');
var vendor = require('./vendor.js');
var constants = require('./constants.js');
var utils = require('./utils.js');

async function installLinks(realBinPath, binName) {
  const isNpx = binName === 'npx';
  // Find package manager being shadowed by this process.
  const binPath = isNpx ? utils.getNpxBinPath() : utils.getNpmBinPath();
  // Lazily access constants.WIN32.
  const {
    WIN32
  } = constants;
  // TODO: Is this early exit needed?
  if (WIN32 && binPath) {
    return binPath;
  }
  const shadowed = isNpx ? utils.isNpxBinPathShadowed() : utils.isNpmBinPathShadowed();
  // Move our bin directory to front of PATH so its found first.
  if (!shadowed) {
    if (WIN32) {
      await vendor.libExports(
      // Lazily access constants.distPath.
      path.join(constants.distPath, `${binName}-cli.js`), path.join(realBinPath, binName));
    }
    const {
      env
    } = process;
    env['PATH'] = `${realBinPath}${path.delimiter}${env['PATH']}`;
  }
  return binPath;
}

const {
  SOCKET_CLI_SAFE_BIN,
  SOCKET_CLI_SAFE_PROGRESS,
  SOCKET_IPC_HANDSHAKE
} = constants;
async function shadowBin(binName, args = process.argv.slice(2)) {
  process.exitCode = 1;
  // Lazily access constants.ENV.NODE_COMPILE_CACHE
  const {
    NODE_COMPILE_CACHE
  } = constants.ENV;
  const terminatorPos = args.indexOf('--');
  const rawBinArgs = terminatorPos === -1 ? args : args.slice(0, terminatorPos);
  const binArgs = rawBinArgs.filter(a => !npm.isNpmProgressFlag(a) && !npm.isNpmNodeOptionsFlag(a));
  const nodeOptionsArg = rawBinArgs.findLast(npm.isNpmNodeOptionsFlag);
  const progressArg = rawBinArgs.findLast(npm.isNpmProgressFlag) !== '--no-progress';
  const otherArgs = terminatorPos === -1 ? [] : args.slice(terminatorPos);
  const permArgs = binName === 'npm' &&
  // Lazily access constants.SUPPORTS_NODE_PERMISSION_FLAG.
  constants.SUPPORTS_NODE_PERMISSION_FLAG ? await (async () => {
    const cwd = process.cwd();
    const stdioPipeOptions = {
      cwd
    };
    const globalPrefix = (await spawn.spawn('npm', ['prefix', '-g'], stdioPipeOptions)).stdout;
    const npmCachePath = (await spawn.spawn('npm', ['config', 'get', 'cache'], stdioPipeOptions)).stdout;
    return ['--permission', '--allow-child-process',
    // '--allow-addons',
    // '--allow-wasi',
    // Allow all reads because npm walks up directories looking for config
    // and package.json files.
    '--allow-fs-read=*', `--allow-fs-write=${cwd}/*`, `--allow-fs-write=${globalPrefix}/*`, `--allow-fs-write=${npmCachePath}/*`];
  })() : [];
  const useDebug = debug.isDebug();
  const useNodeOptions = nodeOptionsArg || permArgs.length;
  const isSilent = !useDebug && !binArgs.some(npm.isNpmLoglevelFlag);
  // The default value of loglevel is "notice". We default to "error" which is
  // two levels quieter.
  const logLevelArgs = isSilent ? ['--loglevel', 'error'] : [];
  const spawnPromise = spawn.spawn(
  // Lazily access constants.execPath.
  constants.execPath, [
  // Lazily access constants.nodeHardenFlags.
  ...constants.nodeHardenFlags,
  // Lazily access constants.nodeNoWarningsFlags.
  ...constants.nodeNoWarningsFlags,
  // Lazily access constants.ENV.INLINED_SOCKET_CLI_SENTRY_BUILD.
  ...(constants.ENV.INLINED_SOCKET_CLI_SENTRY_BUILD ? ['--require',
  // Lazily access constants.instrumentWithSentryPath.
  constants.instrumentWithSentryPath] : []), '--require',
  // Lazily access constants.shadowNpmInjectPath.
  constants.shadowNpmInjectPath,
  // Lazily access constants.shadowBinPath.
  await installLinks(constants.shadowBinPath, binName), ...(useDebug ? ['--trace-uncaught', '--trace-warnings'] : []), ...(useNodeOptions ? [`--node-options='${nodeOptionsArg ? nodeOptionsArg.slice(15) : ''}${utils.cmdFlagsToString(permArgs)}'`] : []),
  // Add '--no-progress' to fix input being swallowed by the npm spinner.
  '--no-progress',
  // Add '--loglevel=error' if a loglevel flag is not provided and the
  // SOCKET_CLI_DEBUG environment variable is not truthy.
  ...logLevelArgs, ...binArgs, ...otherArgs], {
    env: {
      ...process.env,
      ...(NODE_COMPILE_CACHE ? {
        NODE_COMPILE_CACHE
      } : undefined)
    },
    // 'inherit' + 'ipc'
    stdio: [0, 1, 2, 'ipc']
  });
  // See https://nodejs.org/api/child_process.html#event-exit.
  spawnPromise.process.on('exit', (code, signalName) => {
    if (signalName) {
      process.kill(process.pid, signalName);
    } else if (code !== null) {
      // eslint-disable-next-line n/no-process-exit
      process.exit(code);
    }
  });
  spawnPromise.process.send({
    [SOCKET_IPC_HANDSHAKE]: {
      [SOCKET_CLI_SAFE_BIN]: binName,
      [SOCKET_CLI_SAFE_PROGRESS]: progressArg
    }
  });
  await spawnPromise;
}

module.exports = shadowBin;
//# debugId=3e0d6be8-1a26-471a-b5ee-87e7db7dfb5d
//# sourceMappingURL=shadow-npm-bin.js.map
